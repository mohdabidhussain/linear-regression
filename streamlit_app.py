# linear-regression
# liner regression for titanic 
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "5092f1b2-08a7-4e8f-90b7-fe17a685434f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n",
      "None\n",
      "        PassengerId    Survived      Pclass                     Name   Sex  \\\n",
      "count    891.000000  891.000000  891.000000                      891   891   \n",
      "unique          NaN         NaN         NaN                      891     2   \n",
      "top             NaN         NaN         NaN  Braund, Mr. Owen Harris  male   \n",
      "freq            NaN         NaN         NaN                        1   577   \n",
      "mean     446.000000    0.383838    2.308642                      NaN   NaN   \n",
      "std      257.353842    0.486592    0.836071                      NaN   NaN   \n",
      "min        1.000000    0.000000    1.000000                      NaN   NaN   \n",
      "25%      223.500000    0.000000    2.000000                      NaN   NaN   \n",
      "50%      446.000000    0.000000    3.000000                      NaN   NaN   \n",
      "75%      668.500000    1.000000    3.000000                      NaN   NaN   \n",
      "max      891.000000    1.000000    3.000000                      NaN   NaN   \n",
      "\n",
      "               Age       SibSp       Parch  Ticket        Fare    Cabin  \\\n",
      "count   714.000000  891.000000  891.000000     891  891.000000      204   \n",
      "unique         NaN         NaN         NaN     681         NaN      147   \n",
      "top            NaN         NaN         NaN  347082         NaN  B96 B98   \n",
      "freq           NaN         NaN         NaN       7         NaN        4   \n",
      "mean     29.699118    0.523008    0.381594     NaN   32.204208      NaN   \n",
      "std      14.526497    1.102743    0.806057     NaN   49.693429      NaN   \n",
      "min       0.420000    0.000000    0.000000     NaN    0.000000      NaN   \n",
      "25%      20.125000    0.000000    0.000000     NaN    7.910400      NaN   \n",
      "50%      28.000000    0.000000    0.000000     NaN   14.454200      NaN   \n",
      "75%      38.000000    1.000000    0.000000     NaN   31.000000      NaN   \n",
      "max      80.000000    8.000000    6.000000     NaN  512.329200      NaN   \n",
      "\n",
      "       Embarked  \n",
      "count       889  \n",
      "unique        3  \n",
      "top           S  \n",
      "freq        644  \n",
      "mean        NaN  \n",
      "std         NaN  \n",
      "min         NaN  \n",
      "25%         NaN  \n",
      "50%         NaN  \n",
      "75%         NaN  \n",
      "max         NaN  \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\DELL\\AppData\\Local\\Temp\\ipykernel_2168\\2813475698.py:13: FutureWarning: \n",
      "\n",
      "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
      "\n",
      "  sns.countplot(data=train_df, x='Survived', palette='pastel')\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjsAAAHFCAYAAAAUpjivAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAsiElEQVR4nO3dfVRU5aLH8d8oMCIvo7w44xS+dKLTC+Q5QZn2oqZiVmqpWaKlaWdZlCdSw8vxlnpuF5KzUrtZduqqmObR24uWt45JL2KmpocT1zTN6mJqQpjiIIoD4b5/tJzbiKYiOuPD97PWrOU8+5k9z2Yt5euezcZmWZYlAAAAQzUL9AIAAADOJWIHAAAYjdgBAABGI3YAAIDRiB0AAGA0YgcAABiN2AEAAEYjdgAAgNGIHQAAYDRiB2iiPvvsM911111q166d7Ha7nE6nunTpovHjxwdsTVOmTJHNZjun7zFy5Eh16NDhtOcvX75c/fr1k9PpVFhYmGJiYtSzZ0+99tprqq2tPXcLPQM5OTlatmxZoJcBBC1iB2iC3n33XXXt2lWVlZXKy8vTypUr9dxzz+mGG27QkiVLArauBx98UOvWrQvY+/+SZVl64IEH1L9/fx09elTTp0/XBx98oPnz56tTp07KyMjQiy++GOhlSiJ2gFOx8buxgKanW7du+v7777Vt2zaFhIT4bTt69KiaNWuc/wdVV1erRYsW5/xszZkYOXKkVq1apR07dvzqvLy8PE2cOFFTp07VU089VW97WVmZvvnmG914443naKWnLzIyUoMHD1Z+fn6glwIEJc7sAE3Qvn37FBcXVy90JNULHZvNpilTptSb16FDB40cOdL3PD8/XzabTStXrtSoUaMUHx+vli1basmSJbLZbPrwww/r7WP27Nmy2WzatGmTpPofY915551q3769jh49Wu+1nTt31jXXXON7/sILL+jmm29WmzZtFBERoeTkZOXl5TXoo6ba2lpNmzZNl19+uZ588skTznG5XH6hs3//fmVkZOiiiy5SWFiYLrnkEk2aNEler9c3Z8eOHbLZbCeMkuO/zse+Flu2bNHQoUPlcDjkdDo1atQoeTwev9cdOnRI8+fPl81mk81mU/fu3c/4mAGTETtAE9SlSxd99tln+uMf/6jPPvusUa89GTVqlEJDQ7VgwQK98cYbuuuuu9SmTRvNmzev3tz8/Hxdc801uvrqq0+6r507d+qjjz7yG9+2bZs2bNigBx54wDf27bffKj09XQsWLNB///d/a/To0frLX/6iMWPGnPEx/OMf/9D+/fs1YMCA0zordeTIEfXo0UOvvvqqxo0bp3fffVfDhw9XXl6eBg4ceMbv/0uDBg3SZZddpjfffFP/8i//okWLFunxxx/3bV+3bp3Cw8N12223ad26dVq3bl3QfLwGBIv6/60DYLxnnnlG27Zt0/PPP6/nn39eoaGhuvbaa9WvXz89+uijioyMbPC+e/bsqb/+9a9+Y8OHD9fs2bPl8XjkcDgkSVu3btWGDRv0/PPPn3Rft912m5xOp+bNm6devXr5xufNm6ewsDClp6f7xqZPn+7789GjR3XTTTcpNjZWDzzwgJ599lm1bt36tI9h586dkqSOHTue1vz58+dr06ZN+q//+i/dfffdkqTevXsrMjJSEydOVEFBgXr37n3a7/9Lo0eP1hNPPCFJ6tWrl7755hvNnTtXc+bMkc1m0/XXX69mzZopPj5e119/fYPeAzAdZ3aAJig2NlaffPKJNm7cqGeeeUYDBgzQ9u3blZ2dreTkZP34448N3vegQYPqjY0aNUrV1dV+Fz/PmzdPdrvdL1iOFxISouHDh+utt97yfXRTV1enBQsWaMCAAYqNjfXN/fzzz9W/f3/FxsaqefPmCg0N1f3336+6ujpt3769wcdzOj766CNFRERo8ODBfuPHPuY70Ud4p6t///5+z6+++modOXJE5eXlDd4n0NQQO0ATlpqaqokTJ+r111/Xnj179Pjjj2vHjh3Ky8tr8D7btm1bb+yqq67Stdde6/soq66uTgsXLtSAAQMUExPzq/sbNWqUjhw5osWLF0uS3n//fZWWlvp9hLVz507ddNNN+v777/Xcc8/5Qu6FF16Q9POF0meiXbt2kqSSkpLTmr9v3z65XK56H3m1adNGISEh2rdv3xm9/y/9MugkyW63SzrzYwKaMmIHgCQpNDRUkydPliRt3rzZN2632/0usj3mZN/AT3aNywMPPKD169dr69atWrFiRb1gOZkrr7xS1113nS+U5s2bJ7fbrbS0NN+cZcuW6dChQ3rrrbc0fPhw3XjjjUpNTVVYWNgp938iqampiomJ0dtvv63T+YHV2NhY/fDDD/XmlpeX66efflJcXJwkqUWLFpJU7+t5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V199paioKElSZmamli9frsWLFys2Nlbjx4/XHXfcoaKiIs4yAQAA2SzLss70Ra+88ooefvhhxcXFyeVyyWaz/f8ObTb985//bPCCYmJi9Je//EWjRo2S2+1WZmamJk6cKOnnszhOp1PTpk3TmDFj5PF4FB8frwULFuiee+6RJO3Zs0cJCQl677331KdPn9N6z8rKSjkcDnk8HkVHRzd47afyxoa952zfwIVq8HXxp550ATiwgusVgeO1unXsOd3/6X7/btCZnaefflr//u//7ouQxlBXV6fXX39dhw4dUpcuXVRSUqKysjKlpaX55tjtdnXr1k1r167VmDFjVFRUpNraWr85brdbSUlJWrt27Uljx+v1yuv1+p5XVlY22nEAAIDg0qD77FRUVOjuu+9ulAV88cUXioyMlN1u10MPPaSlS5fqyiuv9P1Yu9Pp9JvvdDp928rKyhQWFqbWrVufdM6J5ObmyuFw+B4JCQmNciwAACD4NCh27r77bq1cubJRFvDb3/5WxcXFWr9+vR5++GGNGDFCX375pW/7Lz8ik36+aPn4seOdak52drY8Ho/vsWvXrrM7CAAAELQa9DHWpZdeqieffFLr169XcnKyQkND/bb/8Y9/PO19hYWF+S5QTk1N1caNG/Xcc8/5PiIrKytT27ZtffPLy8t9Z3tcLpdqampUUVHhd3anvLxcXbt2Pel72u122e32014jAAC4cDUodl5++WVFRkaqsLBQhYWFfttsNtsZxc7xLMuS1+tVx44d5XK5VFBQoN///veSpJqaGhUWFmratGmSpJSUFIWGhqqgoEBDhgyRJJWWlmrz5s3Ky8tr8BoAAIA5GhQ7JSUljfLmf/rTn9S3b18lJCTo4MGDWrx4sVatWqUVK1bIZrMpMzNTOTk5SkxMVGJionJyctSyZUulp6dLkhwOh0aPHq3x48crNjZWMTExmjBhgpKTk9WrV69GWSMAALiwNfg+O43hhx9+0H333afS0lI5HA5dffXVWrFihXr37i1JysrKUnV1tTIyMlRRUaHOnTtr5cqVvnvsSNKMGTMUEhKiIUOGqLq6Wj179lR+fj732AEAAJIaeJ+dUaNG/er2uXPnNnhBgcB9doDA4T47gLku6PvsVFRU+D2vra3V5s2bdeDAgRP+glAAAIBAaVDsLF26tN7Y0aNHlZGRoUsuueSsFwUA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77yjPn36aNWqVbrmmmuUn59/RvtJTU31e37vvffqu+++0/r16yVJr732mn73u9/pyiuvPOHrb7/9doWEhOidd96RJL355puKiopSWlqaJKmoqEjffPONoqKifGekYmJidOTIEX377bfyeDwqLS1Vly5dfPsMCQmpty4AgUfsADjvWrRood69e+upp57S2rVrNXLkSE2ePFnNmv38T9Ivr3upra094T4iIiL8nrdt21Y9evTwnd3529/+dtKzOtLPFywPHjzYN3/RokW65557fBc6Hz16VCkpKSouLvZ7bN++Xenp6Q0/eADnHbEDIOCuvPJKHTp0SPHx8ZKk0tJS37ZfXqx8KsOGDdOSJUu0bt06ffvtt7r33ntPOX/FihXasmWLPv74Yw0bNsy37ZprrtHXX3+tNm3a6NJLL/V7OBwOORwOtW3b1ncmSZJ++uknFRUVnfZ6AZwfxA6A82bfvn265ZZbtHDhQm3atEklJSV6/fXXlZeXpwEDBig8PFzXX3+9nnnmGX355ZdavXq1/vVf//W09z9w4EBVVlbq4YcfVo8ePXTRRRf96vxu3brJ6XRq2LBh6tChg66//nrftmHDhikuLk4DBgzQJ598opKSEhUWFuqxxx7T7t27JUmPPfaYnnnmGS1dulTbtm1TRkbGOb9pIYAzR+wAOG8iIyPVuXNnzZgxQzfffLOSkpL05JNP6g9/+INmzZolSZo7d65qa2uVmpqqxx57TE8//fRp7z86Olr9+vXT//zP//idpTkZm82moUOHnnB+y5YttXr1arVr104DBw7UFVdcoVGjRqm6ulrR0dGSpPHjx+v+++/XyJEj1aVLF0VFRemuu+46g68IgPPBZnFTCAAAYDDO7AAAAKMROwAAwGjEDgAAMBqxAwAAjEbsAAAAoxE7AADAaMQOAAAwGrEDAACMRuwAAACjETsAAMBoxA4AADAasQMAAIz2f5wheq91UNwXAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "train_df = pd.read_csv('Titanic_train.csv')\n",
    "test_df = pd.read_csv('Titanic_test.csv')\n",
    "\n",
    "# Overview\n",
    "print(train_df.info())\n",
    "print(train_df.describe(include='all'))\n",
    "\n",
    "# Visualize survival distribution\n",
    "sns.countplot(data=train_df, x='Survived', palette='pastel')\n",
    "plt.title(\"Survival Count\")\n",
    "plt.show()\n",
    "\n",
    "# Survival by gender\n",
    "sns.countplot(data=train_df, x='Survived', hue='Sex', palette='pastel')\n",
    "plt.title(\"Survival Count by Gender\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "8fd09136-1536-46f6-90e8-ee290b274d44",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "a8abfd8c-5e4a-44c4-be07-4f9cf2e5f2ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = train_df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "908bc614-121b-465f-8799-585eb46edc80",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns=['Name', 'Ticket', 'Cabin', 'PassengerId'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "982740dc-c8f9-4bc5-86a3-8b6ad70277f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Age'] = df['Age'].fillna(df['Age'].median())\n",
    "df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "e4771c22-59e2-489e-914c-f6f88a6fd77a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.get_dummies(df, columns=['Sex', 'Embarked'], drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "5c607478-321e-4d56-87e3-b604bc1ca7f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-3 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-3 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-3 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-3 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-3 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=1000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(max_iter=1000)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(max_iter=1000)"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve\n",
    "\n",
    "X = df.drop('Survived', axis=1)\n",
    "y = df['Survived']\n",
    "\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "model = LogisticRegression(max_iter=1000)\n",
    "model.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "4853528d-d37a-4c48-ab93-f4beb3b0dfce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[90 15]\n",
      " [19 55]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.86      0.84       105\n",
      "           1       0.79      0.74      0.76        74\n",
      "\n",
      "    accuracy                           0.81       179\n",
      "   macro avg       0.81      0.80      0.80       179\n",
      "weighted avg       0.81      0.81      0.81       179\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred = model.predict(X_val)\n",
    "y_prob = model.predict_proba(X_val)[:, 1]\n",
    "\n",
    "print(confusion_matrix(y_val, y_pred))\n",
    "print(classification_report(y_val, y_pred))\n",
    "\n",
    "# ROC-AUC\n",
    "fpr, tpr, _ = roc_curve(y_val, y_prob)\n",
    "plt.plot(fpr, tpr, label=f\"AUC = {roc_auc_score(y_val, y_prob):.2f}\")\n",
    "plt.xlabel(\"False Positive Rate\")\n",
    "plt.ylabel(\"True Positive Rate\")\n",
    "plt.title(\"ROC Curve\")\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "b6f648ad-643e-4708-b75e-d2aff95a3aca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Feature  Coefficient\n",
      "5    Sex_male    -2.592285\n",
      "0      Pclass    -0.937747\n",
      "7  Embarked_S    -0.399309\n",
      "2       SibSp    -0.295002\n",
      "6  Embarked_Q    -0.111652\n",
      "3       Parch    -0.107868\n",
      "1         Age    -0.030509\n",
      "4        Fare     0.002583\n"
     ]
    }
   ],
   "source": [
    "coeff_df = pd.DataFrame({'Feature': X.columns, 'Coefficient': model.coef_[0]})\n",
    "print(coeff_df.sort_values(by='Coefficient', key=abs, ascending=False))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc309581-8c7a-4885-9246-37b902a67750",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
